import React, { useState, useEffect } from 'react';
import { Trophy, Zap, Target, Flame } from 'lucide-react';

const FitnessApp = () => {
  const [trainedMuscles, setTrainedMuscles] = useState({});
  const [medals, setMedals] = useState(0);
  const [showSplash, setShowSplash] = useState(true);
  const [currentQuote, setCurrentQuote] = useState('');
  const [notifications, setNotifications] = useState([]);

  const muscleGroups = {
    biceps: { name: 'Bíceps', x: 180, y: 220 },
    triceps: { name: 'Tríceps', x: 120, y: 220 },
    chest: { name: 'Peito', x: 150, y: 180 },
    abs: { name: 'Abdômen', x: 150, y: 240 },
    quadriceps: { name: 'Quadríceps', x: 150, y: 320 },
    hamstrings: { name: 'Posterior', x: 150, y: 340 },
    calves: { name: 'Panturrilha', x: 150, y: 380 },
    shoulders: { name: 'Ombros', x: 150, y: 160 },
    back: { name: 'Costas', x: 150, y: 200 },
    glutes: { name: 'Glúteos', x: 150, y: 280 }
  };

  const motivationalQuotes = [
    "Seu corpo pode fazer isso. É sua mente que você precisa convencer.",
    "A dor que você sente hoje será a força que você sentirá amanhã.",
    "Não desista. Sofra agora e viva o resto da sua vida como um campeão.",
    "O sucesso não é dado. É conquistado no ginásio.",
    "Cada repetição te leva mais perto do seu objetivo.",
    "Seja mais forte que suas desculpas.",
    "O único treino ruim é aquele que não aconteceu.",
    "Transforme suas feridas em sabedoria, sua dor em poder.",
    "Você é mais forte do que pensa e mais capaz do que imagina.",
    "Disciplina é fazer o que precisa ser feito, mesmo quando não quer."
  ];

  useEffect(() => {
    // Carregar dados salvos
    const savedData = JSON.parse(localStorage.getItem('fitnessData') || '{}');
    const today = new Date().toDateString();
    
    if (savedData.date === today) {
      setTrainedMuscles(savedData.muscles || {});
      setMedals(savedData.medals || 0);
    } else {
      // Novo dia, reset
      setTrainedMuscles({});
      setMedals(0);
    }

    // Quote do dia baseada na data
    const quoteIndex = new Date().getDate() % motivationalQuotes.length;
    setCurrentQuote(motivationalQuotes[quoteIndex]);

    // Splash screen
    const splashTimer = setTimeout(() => setShowSplash(false), 3000);
    return () => clearTimeout(splashTimer);
  }, []);

  const saveData = (muscles, medalCount) => {
    const data = {
      date: new Date().toDateString(),
      muscles,
      medals: medalCount
    };
    localStorage.setItem('fitnessData', JSON.stringify(data));
  };

  const handleMuscleClick = (muscleKey) => {
    const newTrainedMuscles = { ...trainedMuscles };
    const currentCount = newTrainedMuscles[muscleKey] || 0;
    newTrainedMuscles[muscleKey] = currentCount + 1;
    
    setTrainedMuscles(newTrainedMuscles);
    
    // Calcular medalhas
    const trainedCount = Object.keys(newTrainedMuscles).length;
    const totalSessions = Object.values(newTrainedMuscles).reduce((sum, count) => sum + count, 0);
    
    let newMedals = 0;
    if (trainedCount >= 3) newMedals += Math.floor(trainedCount / 3);
    if (totalSessions >= 6) newMedals += Math.floor(totalSessions / 3) - 1;
    
    setMedals(newMedals);
    
    // Adicionar notificação
    const muscleName = muscleGroups[muscleKey].name;
    const count = newTrainedMuscles[muscleKey];
    const message = count === 1 
      ? `${muscleName} treinado hoje!`
      : `${muscleName} treinado ${count} vezes hoje!`;
    
    const notification = {
      id: Date.now(),
      message,
      type: count === 1 ? 'first' : 'double'
    };
    
    setNotifications(prev => [...prev, notification]);
    
    // Remover notificação após 3 segundos
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id));
    }, 3000);
    
    saveData(newTrainedMuscles, newMedals);
  };

  const getMuscleColor = (muscleKey) => {
    const count = trainedMuscles[muscleKey] || 0;
    if (count === 0) return '#e5e7eb';
    if (count === 1) return '#10b981';
    return '#f59e0b';
  };

  if (showSplash) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 flex items-center justify-center">
        <div className="text-center text-white animate-pulse">
          <div className="mb-8">
            <Zap size={80} className="mx-auto mb-4 animate-bounce" />
            <h1 className="text-4xl font-bold mb-2">Fitness Challenge</h1>
            <p className="text-xl opacity-90">Transforme seu corpo, transforme sua vida</p>
          </div>
          <div className="flex justify-center space-x-2">
            <div className="w-3 h-3 bg-white rounded-full animate-bounce"></div>
            <div className="w-3 h-3 bg-white rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
            <div className="w-3 h-3 bg-white rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 text-white">
      {/* Header com medalhas */}
      <div className="bg-black bg-opacity-50 p-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold flex items-center">
          <Target className="mr-2" />
          Fitness Challenge
        </h1>
        <div className="flex items-center space-x-2">
          {medals > 0 && (
            <>
              <Trophy className="text-yellow-400" size={24} />
              <span className="text-yellow-400 font-bold">x{medals}</span>
            </>
          )}
        </div>
      </div>

      {/* Notificações */}
      <div className="fixed top-20 right-4 z-50 space-y-2">
        {notifications.map(notification => (
          <div
            key={notification.id}
            className={`p-3 rounded-lg shadow-lg animate-slide-in-right ${
              notification.type === 'first' 
                ? 'bg-green-500 text-white' 
                : 'bg-yellow-500 text-black'
            }`}
          >
            {notification.message}
          </div>
        ))}
      </div>

      {/* Corpo Humano - Vista Frontal e Traseira */}
      <div className="flex justify-center py-4 px-2">
        <div className="flex flex-col md:flex-row gap-4 md:gap-8 w-full max-w-4xl">
          {/* Boneco Frontal */}
          <div className="text-center flex-1">
            <h3 className="text-sm md:text-lg font-bold mb-2 md:mb-4 text-yellow-400">Vista Frontal</h3>
            <svg width="100%" height="auto" viewBox="0 0 300 450" className="drop-shadow-2xl max-w-xs mx-auto">
              {/* Cabeça */}
              <ellipse cx="150" cy="50" rx="25" ry="35" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Rosto */}
              <circle cx="140" cy="45" r="2" fill="#000"/>
              <circle cx="160" cy="45" r="2" fill="#000"/>
              <path d="M145 55 Q150 60 155 55" stroke="#000" strokeWidth="1" fill="none"/>
              
              {/* Pescoço */}
              <rect x="140" y="80" width="20" height="20" fill="#fbbf24" stroke="#f59e0b" strokeWidth="1"/>
              
              {/* Tronco */}
              <ellipse cx="150" cy="160" rx="45" ry="60" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Ombros Frontais */}
              <circle 
                cx="105" cy="140" r="20" 
                fill={getMuscleColor('shoulders')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('shoulders')}
              />
              <circle 
                cx="195" cy="140" r="20" 
                fill={getMuscleColor('shoulders')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('shoulders')}
              />
              
              {/* Peito */}
              <ellipse 
                cx="150" cy="150" rx="35" ry="25" 
                fill={getMuscleColor('chest')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('chest')}
              />
              
              {/* Músculos do peito detalhados */}
              <path d="M125 140 Q150 130 175 140 Q150 165 125 140" 
                    fill={getMuscleColor('chest')} 
                    stroke="#374151" strokeWidth="1" opacity="0.8"
                    className="cursor-pointer hover:opacity-80 transition-all"
                    onClick={() => handleMuscleClick('chest')}
              />
              
              {/* Abdômen com gomos */}
              <rect 
                x="125" y="180" width="50" height="50" rx="10"
                fill={getMuscleColor('abs')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('abs')}
              />
              
              {/* Gomos do abdômen */}
              <rect x="135" y="185" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              <rect x="153" y="185" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              <rect x="135" y="200" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              <rect x="153" y="200" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              <rect x="135" y="215" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              <rect x="153" y="215" width="12" height="8" rx="2" fill="#374151" opacity="0.3"/>
              
              {/* Braços */}
              <ellipse cx="80" cy="180" rx="15" ry="40" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="220" cy="180" rx="15" ry="40" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Bíceps */}
              <ellipse 
                cx="75" cy="160" rx="12" ry="20" 
                fill={getMuscleColor('biceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('biceps')}
              />
              <ellipse 
                cx="225" cy="160" rx="12" ry="20" 
                fill={getMuscleColor('biceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('biceps')}
              />
              
              {/* Antebraços */}
              <ellipse cx="70" cy="220" rx="10" ry="30" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="230" cy="220" rx="10" ry="30" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Quadril */}
              <ellipse cx="150" cy="240" rx="40" ry="20" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Coxas */}
              <ellipse cx="125" cy="300" rx="18" ry="45" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="175" cy="300" rx="18" ry="45" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Quadríceps */}
              <ellipse 
                cx="120" cy="285" rx="15" ry="35" 
                fill={getMuscleColor('quadriceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('quadriceps')}
              />
              <ellipse 
                cx="180" cy="285" rx="15" ry="35" 
                fill={getMuscleColor('quadriceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('quadriceps')}
              />
              
              {/* Panturrilhas */}
              <ellipse cx="125" cy="380" rx="12" ry="25" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="175" cy="380" rx="12" ry="25" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              <ellipse 
                cx="125" cy="375" rx="10" ry="20" 
                fill={getMuscleColor('calves')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('calves')}
              />
              <ellipse 
                cx="175" cy="375" rx="10" ry="20" 
                fill={getMuscleColor('calves')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('calves')}
              />
              
              {/* Pés */}
              <ellipse cx="115" cy="420" rx="8" ry="15" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="185" cy="420" rx="8" ry="15" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Mãos */}
              <circle cx="60" cy="250" r="8" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <circle cx="240" cy="250" r="8" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
            </svg>
          </div>

          {/* Boneco Traseiro */}
          <div className="text-center flex-1">
            <h3 className="text-sm md:text-lg font-bold mb-2 md:mb-4 text-yellow-400">Vista Traseira</h3>
            <svg width="100%" height="auto" viewBox="0 0 300 450" className="drop-shadow-2xl max-w-xs mx-auto">
              {/* Cabeça traseira */}
              <ellipse cx="150" cy="50" rx="25" ry="35" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Cabelo */}
              <ellipse cx="150" cy="35" rx="20" ry="15" fill="#8b4513" stroke="#654321" strokeWidth="1"/>
              
              {/* Pescoço */}
              <rect x="140" y="80" width="20" height="20" fill="#fbbf24" stroke="#f59e0b" strokeWidth="1"/>
              
              {/* Tronco traseiro */}
              <ellipse cx="150" cy="160" rx="45" ry="60" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Ombros traseiros */}
              <circle 
                cx="105" cy="140" r="22" 
                fill={getMuscleColor('shoulders')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('shoulders')}
              />
              <circle 
                cx="195" cy="140" r="22" 
                fill={getMuscleColor('shoulders')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('shoulders')}
              />
              
              {/* Costas - Músculo principal */}
              <ellipse 
                cx="150" cy="170" rx="35" ry="50" 
                fill={getMuscleColor('back')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('back')}
              />
              
              {/* Detalhes da musculatura das costas */}
              <path d="M125 140 Q150 130 175 140 Q150 200 125 140" 
                    fill={getMuscleColor('back')} 
                    stroke="#374151" strokeWidth="1" opacity="0.8"
                    className="cursor-pointer hover:opacity-80 transition-all"
                    onClick={() => handleMuscleClick('back')}
              />
              
              {/* Linha da coluna */}
              <line x1="150" y1="130" x2="150" y2="220" stroke="#374151" strokeWidth="2" opacity="0.5"/>
              
              {/* Braços traseiros */}
              <ellipse cx="80" cy="180" rx="15" ry="40" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="220" cy="180" rx="15" ry="40" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Tríceps */}
              <ellipse 
                cx="85" cy="165" rx="10" ry="22" 
                fill={getMuscleColor('triceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('triceps')}
              />
              <ellipse 
                cx="215" cy="165" rx="10" ry="22" 
                fill={getMuscleColor('triceps')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('triceps')}
              />
              
              {/* Antebraços traseiros */}
              <ellipse cx="70" cy="220" rx="10" ry="30" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="230" cy="220" rx="10" ry="30" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Parte inferior das costas */}
              <rect 
                x="125" y="210" width="50" height="30" rx="15"
                fill={getMuscleColor('back')} 
                stroke="#374151" strokeWidth="2" opacity="0.8"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('back')}
              />
              
              {/* Glúteos */}
              <ellipse 
                cx="135" cy="260" rx="18" ry="20" 
                fill={getMuscleColor('glutes')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('glutes')}
              />
              <ellipse 
                cx="165" cy="260" rx="18" ry="20" 
                fill={getMuscleColor('glutes')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('glutes')}
              />
              
              {/* Coxas traseiras */}
              <ellipse cx="125" cy="310" rx="18" ry="45" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="175" cy="310" rx="18" ry="45" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Posterior da coxa (isquiotibiais) */}
              <ellipse 
                cx="125" cy="300" rx="15" ry="35" 
                fill={getMuscleColor('hamstrings')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('hamstrings')}
              />
              <ellipse 
                cx="175" cy="300" rx="15" ry="35" 
                fill={getMuscleColor('hamstrings')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('hamstrings')}
              />
              
              {/* Panturrilhas traseiras */}
              <ellipse cx="125" cy="380" rx="12" ry="25" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="175" cy="380" rx="12" ry="25" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              <ellipse 
                cx="125" cy="375" rx="10" ry="20" 
                fill={getMuscleColor('calves')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('calves')}
              />
              <ellipse 
                cx="175" cy="375" rx="10" ry="20" 
                fill={getMuscleColor('calves')} 
                stroke="#374151" strokeWidth="2"
                className="cursor-pointer hover:opacity-80 transition-all hover:scale-105"
                onClick={() => handleMuscleClick('calves')}
              />
              
              {/* Pés traseiros */}
              <ellipse cx="115" cy="420" rx="8" ry="15" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <ellipse cx="185" cy="420" rx="8" ry="15" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              
              {/* Mãos traseiras */}
              <circle cx="60" cy="250" r="8" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
              <circle cx="240" cy="250" r="8" fill="#fbbf24" stroke="#f59e0b" strokeWidth="2"/>
            </svg>
          </div>
        </div>
      </div>

      {/* Cards de músculos treinados */}
      <div className="px-2 md:px-4 mb-4 md:mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-w-4xl mx-auto">
          {Object.entries(trainedMuscles).map(([muscle, count]) => (
            <div
              key={muscle}
              className={`p-2 md:p-3 rounded-lg shadow-lg text-sm md:text-base ${
                count === 1 
                  ? 'bg-green-500 bg-opacity-90' 
                  : 'bg-yellow-500 bg-opacity-90 text-black'
              }`}
            >
              <div className="flex items-center justify-between">
                <span className="font-semibold">
                  {muscleGroups[muscle].name} treinado {count > 1 ? `${count} vezes` : ''} hoje
                </span>
                <Flame size={16} className="md:w-5 md:h-5" />
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Frase motivacional */}
      <div className="px-2 md:px-4 pb-4 md:pb-8">
        <div className="max-w-2xl mx-auto">
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-4 md:p-6 rounded-lg shadow-xl text-center">
            <h3 className="text-base md:text-lg font-bold mb-2">Motivação do Dia</h3>
            <p className="text-xs md:text-sm italic">"{currentQuote}"</p>
          </div>
        </div>
      </div>

      {/* Legenda */}
      <div className="px-2 md:px-4 pb-4">
        <div className="max-w-xl mx-auto bg-black bg-opacity-50 p-3 md:p-4 rounded-lg">
          <h4 className="font-bold mb-2 text-center text-sm md:text-base">Como usar:</h4>
          <div className="space-y-1 text-xs md:text-sm">
            <div className="flex items-center justify-between">
              <span>Não treinado</span>
              <div className="w-3 h-3 md:w-4 md:h-4 bg-gray-300 rounded"></div>
            </div>
            <div className="flex items-center justify-between">
              <span>Treinado 1x</span>
              <div className="w-3 h-3 md:w-4 md:h-4 bg-green-500 rounded"></div>
            </div>
            <div className="flex items-center justify-between">
              <span>Treinado 2x+</span>
              <div className="w-3 h-3 md:w-4 md:h-4 bg-yellow-500 rounded"></div>
            </div>
          </div>
        </div>
      </div>

      {/* Rodapé */}
      <div className="bg-black bg-opacity-70 py-4 text-center">
        <p className="text-sm text-gray-400">
          Desenvolvido por <span className="text-yellow-400 font-bold">Alírio Lauriano de Azevedo Neto</span>
        </p>
      </div>

      <style jsx>{`
        @keyframes slide-in-right {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        .animate-slide-in-right {
          animation: slide-in-right 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default FitnessApp;
